{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "history_visible": true,
      "authorship_tag": "ABX9TyMozuDjI02Tubo1geoRTRdx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/joshieadalidipn/escom_academico/blob/main/1%20Y%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CbQT_kAU4TUc"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv(\"Mall_Customers.csv\")\n",
        "dataset.head()"
      ],
      "metadata": {
        "id": "IlO3tGGX4crW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = dataset.iloc[:, [3,4]].values"
      ],
      "metadata": {
        "id": "1hJo7PCw4eRm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans"
      ],
      "metadata": {
        "id": "qr_uHlCQ4c_p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wcss=[]\n",
        "for i in range(1,11):\n",
        "  kmeans= KMeans(n_clusters= i, n_init= 'auto', random_state = 42)\n",
        "  kmeans.fit(x)\n",
        "  wcss.append(kmeans.inertia_)\n"
      ],
      "metadata": {
        "id": "98PHrhVH8mH_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(1,11),wcss)\n",
        "plt.title(\"The Elbow Method\")\n",
        "plt.xlabel(\"Number of clusters\")\n",
        "plt.ylabel(\"WCSS\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "WeVl-Rp49k8k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "  kmeans= KMeans(n_clusters= 5, n_init= 'auto', random_state = 42)\n",
        "  y_kmeans =kmeans.fit_predict(x)\n"
      ],
      "metadata": {
        "id": "-zoPgsZC_DUj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x[y_kmeans== 0,0], x[y_kmeans ==0,1], s=100, c='red', label= 'Cluster 1')\n",
        "plt.scatter(x[y_kmeans== 1,0], x[y_kmeans ==1,1], s=100, c='blue', label= 'Cluster 2')\n",
        "plt.scatter(x[y_kmeans== 2,0], x[y_kmeans ==2,1], s=100, c='green', label= 'Cluster 3')\n",
        "plt.scatter(x[y_kmeans== 3,0], x[y_kmeans ==3,1], s=100, c='purple', label= 'Cluster 4')\n",
        "plt.scatter(x[y_kmeans== 4,0], x[y_kmeans ==4,1], s=100, c='cyan', label= 'Cluster 5')\n",
        "plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=300, c='yellow', label='Centroids')\n",
        "plt.title(\"Cluster of customers\")\n",
        "plt.xlabel(\"Anual Income(k$)\")\n",
        "plt.ylabel(\"Spending Score(1-100)\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "QYxGW_b2_8AD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.cluster.hierarchy as sch"
      ],
      "metadata": {
        "id": "dcSrHeF-EhjP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dendograma = sch.dendrogram(sch.linkage(x, method= \"ward\"))\n",
        "plt.title(\"Dendrograma\")\n",
        "plt.xlabel(\"Customers\")\n",
        "plt.ylabel(\"Euclidean Distance\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "yuUB8kAFEu_-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import AgglomerativeClustering"
      ],
      "metadata": {
        "id": "4JTomDRlGuU5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')\n",
        "y_hc = hc.fit_predict(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aFh0dDAXG94p",
        "outputId": "a1925212-041e-4193-f0cd-c27fd5ce1d7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_agglomerative.py:983: FutureWarning: Attribute `affinity` was deprecated in version 1.2 and will be removed in 1.4. Use `metric` instead\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x[y_hc== 0,0], x[y_hc ==0,1], s=100, c='red', label= 'Cautos')\n",
        "plt.scatter(x[y_hc== 1,0], x[y_hc ==1,1], s=100, c='blue', label= 'Est√°ndar')\n",
        "plt.scatter(x[y_hc== 2,0], x[y_hc ==2,1], s=100, c='green', label= 'Objetivo')\n",
        "plt.scatter(x[y_hc== 3,0], x[y_hc ==3,1], s=100, c='purple', label= 'Descuidados')\n",
        "plt.scatter(x[y_hc== 4,0], x[y_hc ==4,1], s=100, c='cyan', label= 'Conservadores')\n",
        "#plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=300, c='yellow', label='Centroids')\n",
        "plt.title(\"Cluster of customers\")\n",
        "plt.xlabel(\"Anual Income(k$)\")\n",
        "plt.ylabel(\"Spending Score(1-100)\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "d73U_tfNHgcB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}